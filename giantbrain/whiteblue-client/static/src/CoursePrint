import React, { Component } from 'react';
import './css/react-draft-wysiwyg.css';
import ReactDOM from 'react-dom'
import { Link } from 'react-router-dom';
import gql from 'graphql-tag';
import { Mutation,Query } from 'react-apollo';

import 'whatwg-fetch';
import 'babel-polyfill';
import uuid from 'uuid';
import Loading from './Loading.js';
import Section from './Section.js';


export default class CoursesMarker extends Component {
  constructor(props) {
    super(props);
    this.state = {
	  assessEditorState : true,
	  courseEditorState : false,
	  currentContentType : "Course",
	  currentPromotion : "5de24016e9b04e0290c5db3d",
	  currentSectionId : "4f34c0eb-9fad-4e65-b22f-ff128a899779",
	  currentContent : "Rearranging to avoid summing the infinite tail of the distribution...",
	  currentHeaderSection : "",
	  currentCourseId :"5dda52595232b51c88da6023",
	  assessState : { 
        promotionId: "ahjjiojoihekbbvnvccmmklkkjgbcfc 22",
        courseId: "",
        teacherId: "",
		duration : 50,
		startDay : new Date(),
		endDay : new Date(),
		questionList : [{
			text : "In javascript what function make process asynchrone",
			type : true,
			answers : ["async","promise","sync","wait",],
		}],
	  },
      editorState: {
			header : "",
			fields : "",
			description : "",
			authors : {
				username : "Satoshi",
				middlename : "Nakamoto",
				firstname : "",
				picture : ""
			},
			approvor : {
				username : "James",
				middlename : "Crock",
			},
			content : "",
			section : [
				{	
					sectionId : "",
					tittle : "",
					paragraphs : [{
						type :"text",
						content : "",
						},
					],
				},
			],
		},
	  currentParagraph : 0,
	  currentPortion : 0,
	  currentQuestion : {text : "No question entry",type : true,answers : ["No assertions answers"]},
    };
	
	this.saveAnswer = this.saveAnswer.bind(this);
	this.saveQuestion = this.saveQuestion.bind(this);
	this.saveAssertions = this.saveAssertions.bind(this);
	this.saveAssess = this.saveAssess.bind(this);
	this.previousQuestion = this.previousQuestion.bind(this);
	this.nextQuestion = this.nextQuestion.bind(this);
	this.saveHeader = this.saveHeader.bind(this);
	this.saveField = this.saveField.bind(this);
	this.saveDescription = this.saveDescription.bind(this);
	this.saveContent = this.saveContent.bind(this);
	this.addSection = this.addSection.bind(this);
	this.saveCore = this.saveCore.bind(this);
	this.handlerOnTypeContent = this.handlerOnTypeContent.bind(this);
	this.handlerOnTittleContent = this.handlerOnTittleContent.bind(this);
  }
  addSection(){
	  const textMarker = document.getElementById("recipe-name").innerHTML
	  let currentSectionId = uuid.v4();
	  let currentHeaderSection  = textMarker;
	  this.setState({ currentSectionId, currentHeaderSection});
	  alert('current section id is'+currentSectionId+" and current header section is"+currentHeaderSection);
  }
  saveDescription(){
	  const textMarker = document.getElementById("recipe-name").innerHTML
	  let editorState = this.state.editorState;
	  this.setState({
		  editorState : Object.assign({},editorState,{description : textMarker})
	  });
	  document.getElementById("recipe-name").innerText = "";
  }
  saveHeader(){
	  const textMarker = document.getElementById("recipe-name").innerHTML
	  let editorState = this.state.editorState;
	  this.setState({
		  editorState : Object.assign({},editorState,{header : textMarker})
	  });
	  document.getElementById("recipe-name").innerText = "";
  }
  saveField(){
	   const textMarker = document.getElementById("recipe-name").innerHTML
	  let editorState = this.state.editorState;
	  this.setState({
		  editorState : Object.assign({},editorState,{fields : textMarker})
	  });
	  document.getElementById("recipe-name").innerText = "";
  }
  saveContent(){
	 const textMarker = document.getElementById("recipe-name").innerHTML;
	 alert(textMarker);
	  let currentContent = textMarker;
	  this.setState({ currentContent });
	  document.getElementById("recipe-name").innerText = "";
  }
  saveCore(){
	  const textMarker = document.getElementById("recipe-name").innerHTML
	  let editorState = this.state.editorState;
	  this.setState({
		  editorState : Object.assign({},editorState,{content : textMarker})
	  });
	  document.getElementById("recipe-name").innerText = "";
  }
  handlerOnTittleContent(e){
	  let currentCourseId = e.target.value;
	  this.setState({ currentCourseId });
  }
  handlerOnTypeContent(e){
	  let currentContentType = e.target.value;
	  this.setState({ currentContentType });
  }
  saveQuestion(){
	  let textMarker = document.getElementById("recipe-name").innerText;
	  let currentQuestion = this.state.currentQuestion;
	  let newCurrentQuestion = Object.assign({},currentQuestion,{text: textMarker});
	  this.setState({ currentQuestion : newCurrentQuestion });
	  alert("Question is temporairely save then entry now assertions answers and click to ASSERTIONS");
	  document.getElementById("recipe-name").innerText="";
  }
  nextQuestion(){
	  
  }
  previousQuestion(){
	  
  }
  saveAssess(){
	  const textMarker = document.getElementById("recipe-name").innerText;
	  let assessState = this.state.assessState;
	  let currentQuestion = this.state.currentQuestion;
	  let questionList = assessState.questionList.concat(currentQuestion);
	  let newAssessState = Object.assign({},assessState,{questionList : questionList});
	  this.setState({ assessState : newAssessState });
	  document.getElementById("recipe-name").innerText="";
  }
  saveAssertions(){
	  let textMarker = document.getElementById("recipe-name").innerText;
	  let currentQuestion = this.state.currentQuestion;
	  let answers = currentQuestion.answers;
	  let newCurrentQuestion = Object.assign({},currentQuestion,{answers: answers.concat(textMarker)});
	  this.setState({ currentQuestion : newCurrentQuestion });
	  alert("assertion is correctly save. If you want to save anothers then perform the same process");
	  document.getElementById("recipe-name").innerText="";
  }
  saveAnswer(){
	  
  }
  render() {
		const GET_COURSES = gql`
							query getCourses{
							  getCourses {
								_id
								createdDate
								lastUpdate
								promotionId
								name
								summary
								ponderation
							  }
							}
						`;	
						const SAVE_PARAGRAPH = gql`
							mutation addParagraphToSection(
									$id: String,$sectionId: String, 
									$type: String,$content: String
									) {
								  addParagraphToSection(id: $id, sectionId: $sectionId,
										type: $type,content: $content) {
									_id
									sections {
									  sectionId
									  tittle
									  paragraphs {
										type
										content
									  }
									}
								  }
								}
							`;
		const SAVE_SECTION = gql`
					mutation addSectionToCourse(
									$id: String,
									$sectionId: String, 
									$tittle: String
									) {
						addSectionToCourse(
							id :$id,
							sectionId :$sectionId,
							tittle :$tittle
						) {
							_id
							sections {
							  sectionId
							  tittle
							  paragraphs {
								type
								content
							  }
							}
						  }
						}

					`;
		const SAVE_QUESTION = gql`
					mutation addQuestionToAssess(
									$text: String,
									$type: Boolean, 
									$answers: [String], 
									$assessId: String, 
									) {
						addQuestionToAssess(
							text :$text,
							type :$type,
							answers :$answers,
							assessId :$assessId
						) {
							_id
							questionList{
							  text
							  type
							  answers
							}
						  }
						}
					`;
	const SAVE_ASSESS = gql`
			mutation addAssess(
							$header: String,
							$fields: String, 
							$promotionId: String, 
							$courseId: String, 
							$teacherId: String,
							$description: String,
							$startDay : String,
							$endDay : String,
							$duration : Int,
							) {
				addAssess(input:{
								header: $header,
								fields: $fields,
								promotionId: $promotionId, 
								courseId: $courseId,
								teacherId : $teacherId,
								description: $description,
								startDay : $startDay,
								endDay : $endDay,
								duration : $duration, 
			  }){
				    header
					fields
					promotionId
					courseId
					teacherId
					description
					startDay 
					endDay 
					duration 
					questionList {
					  text
					  type
					  answers
					}
				 }
			}
			`;
    const { editorState } = this.state;
	const currentCourse = {
        _id: "5deb57ebe0928e22c0770c62",
        createdDate: "Sat Dec 07 2019 07:09:16 GMT+0100 (GMT+01:00)",
        lastUpdate: "Sat Dec 07 2019 07:09:16 GMT+0100 (GMT+01:00)",
        promotionId: "5dda49065232b51c88da601e",
        name: "ARTIFICIEL INTELLIGENCE",
        summary: "this is a test summary",
        ponderation: 2,
        sections: [
          {
            sectionId: "45b8b3e9-6d6f-4865-a489-4b4e2552d397",
            tittle: "Combining and Splitting Value",
            paragraphs: [
              {
                type: "text",
                content: "Rearranging to avoid summing the infinite tail of the distribution..."
              },
              {
                type: "text",
                content: "Although it would be possible to handle coins individually, it would be unwieldy to make a separate transaction for every cent in a transfer. To allow value to be split and combined, transactions contain multiple inputs and outputs. Normally there will be either a single input from a larger previous transaction or multiple inputs combining smaller amounts, and at most two outputs: one for the payment, and one returning the change, if any, back to the sender."
              }
            ]
          },
        ]
      };
	return (
			<Query query={GET_COURSES} >
				{({ data :{ getCourses },loading, error})=>{
					if (loading || !getCourses) {
						return <div>Loading ...</div>;
					  }
    return (
		<div className="editor-css">
			<div>Tittle : {this.state.editorState.header}</div>
			<div>Field : {this.state.editorState.fields}</div>
			<div>
				Brief description : {this.state.editorState.description}
			</div>
			<div>
				Authors : {Object.values(this.state.editorState.authors).join(' ')}
			</div>
			<div>
				Course : 
				<select name="course" id="pays" onChange={(e)=> this.handlerOnTittleContent(e)}>
					{getCourses.map((course)=>(<option value={course._id}>
										{course.name}
									</option>)
					)}
				</select>
			</div>
			<div>
				Type : 
				<select name="assess" id="pays" onChange={(e)=> this.handlerOnTypeContent(e)}>
					{["Course","Assessment","Exercises"]
						.map((level)=>(<option value={level}>
										{level}
									</option>)
					)}
				</select>
			</div>
			<div>
				Promotion : 
				<select name="promotionLevel" id="pays" value="">
					{["First Graduate","Second Graduate","Third Graduate","First Master","Second Master"]
						.map((level)=>(<option value={level}>
										{level}
									</option>)
					)}
				</select>
			</div>
			{this.state.currentContentType =="Course" ?(<div id="core-content">
				{this.state.editorState.content}
			</div>): null}
		  {this.state.currentContentType =="Assessment" ? (
			<div id="core-content">
				{this.state.assessState.questionList.map((question)=>{
					return (<div>
							<div>{question.text}</div>
							<div>
								{question.answers.map((answer,key)=>(
									<div>
										<input type="checkbox" value={key} name={key}/>
										<label htmlFor={key}>{answer}</label>
								</div>))}
							</div>
						</div>)
				})}
			</div>): null}
		  <p 
			contenteditable="true" 
			id="recipe-name"
	      />
		  {this.state.currentContentType =="Assessment" ? 
			(<div>		
				<Mutation mutation={SAVE_QUESTION}>
					{(addQuestionToAssess, { data })=>{
						return (<button onClick={()=>{
									addQuestionToAssess({ variables: {
										text: this.state.currentQuestion.text,
										type: this.state.currentQuestion.type, 
										answers: this.state.currentQuestion.answers, 
										assessId: this.state.currentPromotion, 
									}});
								}}>
									QUESTION SAVE
								</button>)
					}}
				</Mutation>
				<button onClick={this.saveQuestion}>
					INSERT QUESTION 
				</button>
				<button onClick={this.saveAnswer}>ANSWER</button>
				<button onClick={this.saveAssertions}>ASSERTIONS</button>
								
				<Mutation mutation={SAVE_ASSESS} >
					{(addAssess, { data })=>{
						return (<button onClick={() => {
									this.saveAssess();
									addAssess({ variables: { 
													header: this.state.editorState.header,
													fields: this.state.editorState.fields,
													description: this.state.editorState.description,
													promotionId: this.state.assessState.promotionId, 
													courseId: this.state.currentCourseId,
													teacherId : this.props.teacherId,
													startDay : this.state.assessState.startDay,
													endDay : this.state.assessState.endDay,
													duration : this.state.assessState.duration, 
										}});
									alert('Assess successful filled');
							}}>SAVE</button>)
					}}
				</Mutation>			
				<button onClick={this.previousQuestion}>PREVIOUS</button>
				<button onClick={this.nextQuestion}>NEXT</button>
			  </div>): null}
		{this.state.currentContentType =="Course" ?(<div>
		<div className="article-post-frame">
					<div className="article-main-header">
						{currentCourse.name}
					</div><hr />
					<div>
						{currentCourse.sections.map(portion => < Section portion={portion}/>)}
					</div><hr />
				</div>
		<div>
			<button onClick={this.saveHeader}>HEADER</button>
			<button onClick={this.saveField}>FIELD</button>
			<button onClick={this.saveDescription}>DESCRIPTION</button>
			<button onClick={this.saveContent}>CONTENT</button>
			<Mutation mutation={SAVE_SECTION}>
					{(addSectionToCourse, { data })=>{
						return (
							<button onClick={async ()=>{
								await this.addSection();
								await addSectionToCourse({ variables: {
									id: this.state.currentCourseId,
									sectionId: this.state.currentSectionId, 
									tittle: this.state.currentHeaderSection, 
								}});
								document.getElementById("recipe-name").innerText = "";
							}}>
								SECTION
							</button>)
					}}
				</Mutation>
				<Mutation mutation={SAVE_PARAGRAPH} >
					{(addParagraphToSection, { data })=>{
						return (<button onClick={async() => {
									await this.saveContent();
									await addParagraphToSection({ variables: { 
													id: this.state.currentCourseId,
													sectionId: this.state.currentSectionId, 
													type: "text",
													content:  this.state.currentContent
										}});
									alert('this is a current course id '+this.state.currentCourseId);
									alert('this is a current section id'+this.state.currentSectionId);
									alert('this is a current section id'+this.state.currentContent);
									alert('paragraph sucessfull saved');
							}}>PARAGRAPH</button>)
					}}
				</Mutation>
			<button onClick={this.saveContent}>SAVE</button>
		</div></div>):null}
		</div>
    )}}
</Query>);
  }
}

